/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gc171.hw2;

import java.io.IOException;

public class App {
    private Player playerA;
    private Player playerB;

    public static void main(String[] args) {


    }

    //init 2 players
    public void setPlayer(Integer row, Integer col, String playerName) {
        this.playerA = new Player(row, col, "A");
        this.playerB = new Player(row, col, "B");
    }

    //game pre
    public void gamePre() {
        //green stack

        //purple

        //red

        //blue
    }

    //init stack
    public void gStack(String instruction, Player player) {
        for (int i = 0; i < 2; i++) {
            String stackName = "gStack" + i;
            GreenStack greenStack = new GreenStack(stackName, "g", instruction, 2 );
            if(!placeStack(player, greenStack)) {
                System.out.println("invalid input");
                i--;
            }
        }

    }

    public void pStack(String instruction, Player player) {
        for (int i = 0; i < 3; i++) {
            String stackName = "gStack" + i;
            PurpleStack purpleStack = new PurpleStack(stackName, "p", instruction, 3 );
            if(!placeStack(player, purpleStack)) {
                System.out.println("invalid input");
                i--;
            }
        }

    }
    public void rStack(String instuction, Player player) {
        for (int i = 0; i < 2; i++) {
            String stackName = "gStack" + i;
            GreenStack greenStack = new GreenStack(stackName, "g", instuction, 2 );
            if(!placeStack(player, greenStack)) {
                System.out.println("invalid input");
                i--;
            }
        }

    }
    public void bStack(String instuction, Player player) {
        for (int i = 0; i < 2; i++) {
            String stackName = "gStack" + i;
            GreenStack greenStack = new GreenStack(stackName, "g", instuction, 2 );
            if(!placeStack(player, greenStack)) {
                System.out.println("invalid input");
                i--;
            }
        }

    }
    //add stack
    public Boolean placeStack(Player player, Stack stack) {
        Boolean res = true;
        if(player.checkStack(stack)) {
            player.placeStack(stack);
        }
        else {
            res = false;
        }

        return res;
    }
    //game
    public void game(Player self, Player rival) throws IOException {
        Instruction instruction = new Instruction();
        instruction.dig();

        //check input format
        while (true) {
            String input = instruction.prompt(System.in);
            if (instruction.gameFormat(input, self)) {
                break;
            }
        }

        //mark self board, mark rival board
        //interface for input
        //self.getRivalBoard().setBoard();

    }


}
