/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gc171.hw2;

import java.io.IOException;

/*

    the main app

    makes up of 4 part:
        player(database, back end)

        instruction & display system(front end)

        judge(state control)


 */

public class App {
    private Player playerA;
    private Player playerB;
    private Instruction instruction = new Instruction();
    private Display display = new Display();
    private Judge judge = new Judge();

    public static void main(String[] args) throws IOException {
        App main = new App();

        //init player
        main.setPlayer();

        //pre game
        main.gamePre(main.playerA);
        main.gamePre(main.playerB);

        //game
        while (true) {
            main.game(main.playerA, main.playerB);
            if (main.judge.win(main.playerB)) {
                main.instruction.win(main.playerA.getPlayerName());
                break;
            }

            main.game(main.playerB, main.playerA);
            if (main.judge.win(main.playerA)) {
                main.instruction.win(main.playerB.getPlayerName());
                break;
            }

        }

    }

    //init 2 players
    public void setPlayer() {
        Integer row = 20;
        Integer col = 10;
        //init player
        playerA = new Player(row, col, "A", "B");
        playerB = new Player(row, col, "B", "A");
    }

    //game pre
    public void gamePre(Player self) throws IOException {
        instruction.start(self.getPlayerName(), self.getRivalName());
        //green stack
        initStack(self, "G", 2, 2);
        //purple
        initStack(self, "P", 3, 3);
        //red
        initStack(self, "R", 4, 3);
        //blue
        initStack(self, "B", 6, 2);
    }

    //init stack
    public void initStack(Player self, String color, Integer blockNum, Integer stackNum) throws IOException {
        for (int i = 0; i < stackNum; i++) {
            //display
            display.pre(self);

            //read from input
            String input;
            while (true) {
                instruction.place(self.getPlayerName(), instruction.getOrders(i), instruction.getColors(color));
                input = instruction.prompt(System.in);

                //check the format
                if (judge.preFormat(self, input)) {
                    //check the stack fit or not
                    String stackName = color + i;
                    Stack tmp = new Stack(stackName, color, input, blockNum);
                    if (judge.stackCheck(self, tmp)) {
                        self.addStack(tmp);
                        break;
                    }
                    else {
                        System.out.println("Invalid input");
                    }

                }
            }

        }

    }


    //game
    public void game(Player self, Player rival) throws IOException {
        instruction.dig();
        String input;

        //check input format
        while (true) {
            display.game(self);
            input = instruction.prompt(System.in);
            if (judge.gameFormat(self, input) && judge.checkGame(self, input)) {
                break;
            }
        }

        //check if hit or not
        judge.digBlock(self, rival, input);

    }

    /*

        getter for test


     */

    public Player getPlayerA() {
        return playerA;
    }

    public Player getPlayerB() {
        return playerB;
    }
}
